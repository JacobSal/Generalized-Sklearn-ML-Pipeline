#%% DATAPREPROCESSING.PY

def mainLoop(fileNum):
    global dTime, cfpath, folderName, trainDatDir, saveBin, aggDatDir, im_dir, im_list
    #%% PARAMS ###
    channel = 2
    ff_width = 121
    wiener_size = (5,5)
    med_size = 10
    count = 42
    reduceFactor = 2
    # im_list NOTES: removed 3 (temporary),
    #define variables for loops
    hog_features = [np.array([],dtype='float64')]
    im_segs = [np.array([],dtype='float64')]
    bool_segs = [np.array([],dtype='float64')]

    t_start = time.time()
    #opend filfe
    image,nW,nH,_,name,count = im_dir.openFileI(fileNum,'train')
    #load image and its information
    print('   '+'{}.) Procesing Image : {}'.format(count,name))
    #only want the red channel (fyi: cv2 is BGR (0,1,2 respectively) while most image processing considers 
    #the notation RGB (0,1,2 respectively))=
    image = image[:,:,channel]
    #Import train data (if training your model)
    train_bool = LabelMaker.import_train_data(name,(nH,nW),trainDatDir)
    #extract features from image using method(SVM.filter_pipeline) then watershed data useing thresholding algorithm (work to be done here...) to segment image.
    #Additionally, extract filtered image data and hog_Features from segmented image. (will also segment train image if training model) 
    im_segs, bool_segs, _, _, _, hog_features = ProcessPipe.feature_extract(image, ff_width, wiener_size, med_size,reduceFactor,True,train_bool)
    #choose which data you want to merge together to train SVM. Been using my own filter, but could also use hog_features.
    result = ProcessPipe.create_data(hog_features,bool_segs,fileNum,True)
    # result = (tmp_X, tmp_y)
    t_end = time.time()
    print('     '+'Number of Segments : %i'%(len(im_segs)))
    print('     '+"Processing Time for %s : %0.2f"%(name,(t_end-t_start)))
    tmpSaveDir = join(savePath, (f'trained_data_{dTime}_{fileNum}.pkl'))
    DataManager.save_obj(tmpSaveDir,result)
    return result
    #endfor
#enddef